{"version":3,"sources":["logo.svg","components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","props","react_default","a","createElement","alt","src","concat","monster","id","className","name","CardList","monsters","map","card_Card","key","SearchBox","_ref","placeHolder","handelEvent","type","onChange","App","_this","Object","classCallCheck","this","_super","call","e","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_SearchBox","card_list_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6NCK3BC,2BAAO,SAACC,GACjB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAI,UAAUC,IAAG,wBAAAC,OAA0BN,EAAMO,QAAQC,GAAxC,eACtBP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,kBAAkBT,EAAMO,QAAQG,SCF9CC,EAAW,SAACX,GACrB,OAAOC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,aACjBT,EAAMY,SAASC,IAAI,SAAAN,GAAO,OAAIN,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKR,EAAQC,GAAID,QAASA,QCN1DS,SAAY,SAAAC,GAAkC,IAA/BC,EAA+BD,EAA/BC,YAAaC,EAAkBF,EAAlBE,YACrC,OACIlB,EAAAC,EAAAC,cAAA,SAAOiB,KAAK,SAASF,YAAaA,EAAaG,SAAUF,0cCiClDG,0CAhCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAI,EAAAC,KAAAF,OAcFP,YAAc,SAACU,GACbN,EAAKO,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAdtCV,EAAKW,MAAQ,CACXH,YAAa,GACbnB,SAAU,IAJAW,sDASNvB,GACN,OAAOC,EAAAC,EAAAC,cAAA,oBAAYH,EAAMU,kDAEP,IAAAyB,EAAAT,KAClBU,MAAM,8CAA8CC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAAQF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAElB,SAAU4B,uCAKvH,IAAAC,EAC2Bf,KAAKQ,MAA/BtB,EADD6B,EACC7B,SAAUmB,EADXU,EACWV,YACZW,EAAmB9B,EAAS+B,OAAO,SAAApC,GAAO,OAAIA,EAAQG,KAAKkC,cAAcC,SAASd,EAAYa,iBACpG,OACE3C,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAC2C,EAAD,CAAW1B,KAAK,SAASF,YAAY,kBAAkBC,YAAaO,KAAKP,cACzElB,EAAAC,EAAAC,cAAC4C,EAAD,CAAUnC,SAAU8B,YA1BVM,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPtD,EAAAC,EAAAC,cAACF,EAAAC,EAAMsD,WAAP,KACEvD,EAAAC,EAAAC,cAACsD,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,KAAK,SAAA0B,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.4acae309.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './card.css'\r\n/**\r\n * @param{{monster : monster}} props\r\n */\r\nexport const Card = (props) => {\r\n    return (\r\n        <div>\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`} />\r\n            <div className='card-container'>{props.monster.name}</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport './card-list.styles.css'\r\nimport { Card } from '../card/card.jsx'\r\n/**\r\n * \r\n * @param {{monsters: []}} props \r\n */\r\nexport const CardList = (props) => {\r\n    return <div className=\"card-list\">\r\n        {props.monsters.map(monster => <Card key={monster.id} monster={monster}></Card>)}\r\n    </div>\r\n\r\n}","import React from 'react';\r\nimport './search-bos.css'\r\n\r\nexport const SearchBox = ({ placeHolder, handelEvent }) => {\r\n    return (\r\n        <input type=\"search\" placeHolder={placeHolder} onChange={handelEvent} />\r\n    )\r\n}","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list\"\nimport { SearchBox } from \"./components/search-box/search-box\"\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchField: \"\",\n      monsters: [\n\n      ],\n    };\n  }\n  Welcome(props) {\n    return <h1>Hello, {props.name}</h1>;\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({ monsters: users }))\n  }\n  handelEvent = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox type=\"search\" placeHolder=\"search monsters\" handelEvent={this.handelEvent} />\n        <CardList monsters={filteredMonsters}>\n        </CardList>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}